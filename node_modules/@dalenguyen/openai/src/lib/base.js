"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAI = void 0;
const tslib_1 = require("tslib");
const axios_1 = require("axios");
const FormData = require("form-data");
const fs = require("fs");
class OpenAI {
    constructor(apiKey) {
        this.baseUrl = 'https://api.openai.com/v1';
        this.apiKey = apiKey;
    }
    request(url, method, data) {
        var _a, _b, _c;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const options = {
                    method,
                    url,
                    headers: {
                        Authorization: `Bearer ${this.apiKey}`,
                        'Content-Type': 'application/json',
                    },
                };
                if (method !== 'GET') {
                    options.data = data || '';
                }
                // TODO - better type checking for data
                // Upload file
                if ((data === null || data === void 0 ? void 0 : data['file']) != null && (data === null || data === void 0 ? void 0 : data['purpose']) != null) {
                    const formData = new FormData();
                    formData.append('purpose', data['purpose']);
                    formData.append('file', fs.createReadStream(data['file']));
                    options.headers = Object.assign(Object.assign({}, options.headers), formData.getHeaders());
                    options.data = formData;
                }
                const response = yield (0, axios_1.default)(options);
                return response.data;
            }
            catch (error) {
                throw new Error(((_c = (_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) || (error === null || error === void 0 ? void 0 : error.message) || 'Something wrong happened!');
            }
        });
    }
    engines() {
        return this.request(`${this.baseUrl}/engines`, 'GET');
    }
    createAnswer(data) {
        return this.request(`${this.baseUrl}/answers`, 'POST', data);
    }
    // FILES
    listFiles() {
        return this.request(`${this.baseUrl}/files`, 'GET');
    }
    retrieveFile(fileId) {
        return this.request(`${this.baseUrl}/files/${fileId}`, 'GET');
    }
    retrieveFileContent(fileId) {
        return this.request(`${this.baseUrl}/files/${fileId}/content`, 'GET');
    }
    uploadFile(data) {
        return this.request(`${this.baseUrl}/files`, 'POST', data);
    }
    deleteFile(fileId) {
        return this.request(`${this.baseUrl}/files/${fileId}`, 'DELETE');
    }
    // CLASSIFICATIONS
    createClassification(data) {
        return this.request(`${this.baseUrl}/classifications`, 'POST', data);
    }
    // COMPLETIONS
    createCompletion(engine, data) {
        return this.request(`${this.baseUrl}/engines/${engine}/completions`, 'POST', data);
    }
    createCompletionFromModel(data) {
        return this.request(`${this.baseUrl}/completions`, 'POST', data);
    }
    // FINE-TUNE
    listFinetunes() {
        return this.request(`${this.baseUrl}/fine-tunes`, 'GET');
    }
    listFinetuneEvents(finetuneId) {
        return this.request(`${this.baseUrl}/fine-tunes/${finetuneId}/events`, 'GET');
    }
    cancelFinetune(finetuneId) {
        return this.request(`${this.baseUrl}/fine-tunes/${finetuneId}/cancel`, 'POST');
    }
    createFinetune(data) {
        return this.request(`${this.baseUrl}/fine-tunes`, 'POST', data);
    }
    retrieveFinetune(finetuneId) {
        return this.request(`${this.baseUrl}/fine-tunes/${finetuneId}`, 'GET');
    }
    // CONTENT FILTERS
    contentFilter(data) {
        // use default settings
        // https://beta.openai.com/docs/engines/how-do-you-use-the-filter
        const updatedData = Object.assign(Object.assign({}, data), { prompt: data.prompt.indexOf('<|endoftext|>') > -1 ? data.prompt : `<|endoftext|>${data.prompt}\n--\nLabel:`, max_tokens: data.max_tokens || 1, temperature: data.temperature || 0.0, top_p: data.top_p || 0, logprobs: data.logprobs || 100 });
        return this.request(`${this.baseUrl}/engines/content-filter-alpha-c4/completions`, 'POST', updatedData);
    }
}
exports.OpenAI = OpenAI;
//# sourceMappingURL=base.js.map